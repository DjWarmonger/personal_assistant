---
description: 
globs: **/tests/**/*.py
alwaysApply: false
---
# Testing Practices

This document outlines best practices for testing components of the PersonalAssistant project.

## Environment Setup

All tests must be run in the `services` conda environment:

```bash
conda activate services
```

## Test Frameworks

- Use **unittest** for tz_common tests
- Use **pytest** for agent tests (e.g., NotionAgent, JsonAgent)

## Running Tests from Root Directory

Always run tests from the project root directory (`PersonalAssistant`). Use `cwd` if you encounter any issue with testing directories.

Here are example commands for each sub-project:

### Common Library (tz_common)
```bash
# Run all tests
conda activate services
python -m unittest discover -s common/tests

# Run specific test file
python -m unittest common.tests.test_imports
```

### Agents
```bash
# Run all tests for NotionAgent
conda activate services
python -m pytest Agents/NotionAgent/tests

# Run with verbose output for NotionAgent
python -m pytest Agents/NotionAgent/tests -v

# Run specific test file for JsonAgent
python -m pytest Agents/JsonAgent/tests/test_specific_file.py

# Run specific test method for NotionAgent
python -m pytest Agents/NotionAgent/tests/test_block_cache.py::TestBlockCache::test_specific_method

# Run all tests with output capture disabled (useful for debugging)
conda activate services
python -m pytest -s Agents/JsonAgent/tests
```

## Test Configuration Files

Each sub-project may have its own test configuration:

- **NotionAgent**: Uses `pytest.ini` with `testpaths = tests`
- **Common**: Uses `pyproject.toml` with pytest configuration
- **JsonAgent**: May use pytest without specific configuration

## Running All Tests

To run tests for multiple sub-projects in sequence:

```bash
conda activate services

# Run common tests
echo "Running common tests..."
python -m unittest discover -s common/tests

# Run NotionAgent tests
echo "Running NotionAgent tests..."
python -m pytest Agents/NotionAgent/tests

# Run JsonAgent tests
echo "Running JsonAgent tests..."
python -m pytest Agents/JsonAgent/tests
```

* If you need to test more than one test case from a suite, run the full suite
* If you need to test more than one suite, run all the tests at once

## Test Isolation

Tests should be isolated from each other:

1. Each test should set up its own environment
2. Tests should not depend on each other's state
3. Use temporary files and directories when needed
4. Clean up any resources after tests complete

## Avoid Testing Trivial Imports

Skip testing imports that only verify module loading without any actual functionality. Focus testing efforts on:

- Business logic and algorithms
- Error handling and edge cases
- Integration between components
- Data validation and transformation

## Test-Suite lifecycle and maintenance

### Keep the Suite Relevant

* Routinely prune empty, placeholder, or obsolete tests.
* Add new tests only for current, meaningful API behaviour.

 ### Know the Test's Purpose

* **Migration / Verification tests** - temporary helpers to confirm parity with a legacy system. Plan their deletion as soon as the migration is finished.
* **Unit tests** - isolate and check one small unit of logic.
* **Integration tests** - exercise interactions across components.

 ## Ask the Value Question First

* Before writing any test, ask: “Will this still earn its keep after the feature ships?”
* If its value disappears (e.g., after a migration), schedule its removal up front.

 ### Organise by Production Module

* Prefer one test file per production file (e.g., `block_manager.py` → `test_block_manager.py`).
* When a file grows, group related cases into classes within the same file (`TestCache`, `TestFiltering`, …).
* Split into a separate file only when the new scope is clearly distinct and enduring.

 ### Avoid “Phase” Files

* Do not create throw-away files like `test_feature_phase1.py`, `test_feature_phase2.py`.
* Append new scenarios to the existing file instead of scattering tests across versions.

Follow these principles yo keeps the test suite clear, lean, and genuinely protective of the evolving codebase.




