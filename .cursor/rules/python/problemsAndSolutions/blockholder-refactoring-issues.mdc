---
description: 
globs: 
alwaysApply: false
---
## BlockHolder Refactoring Implementation Issues

* Issue: Misunderstood cache storage requirements during initial planning phase. Initially proposed changing cache to store int IDs instead of UUIDs.
* Resolution: User corrected that cache should continue storing UUIDs internally as they are immutable and important. Int IDs are only optimization layer for AI Agent exposure at `BlockManager`/Agent interface level.
* Prevention: Clarify data storage requirements and immutability constraints before proposing architectural changes. Ask about data persistence requirements and which identifiers are considered canonical.
## BlockHolder Refactoring Implementation Issues

* Issue: Misunderstood cache storage requirements during initial planning phase. Initially proposed changing cache to store int IDs instead of UUIDs.
* Resolution: User corrected that cache should continue storing UUIDs internally as they are immutable and important. Int IDs are only optimization layer for AI Agent exposure at `BlockManager`/Agent interface level.
* Prevention: Clarify data storage requirements and immutability constraints before proposing architectural changes. Ask about data persistence requirements and which identifiers are considered canonical.

## Test Failure Analysis and Fixes

* Issue: Multiple test failures after initial implementation - BlockHolder constructor signature changes, UUID/int conversion errors, cache content serialization issues, and changed `get_children` behavior.
* Resolution: Systematically fixed each test category: updated test setup for new constructor, fixed data modification order to preserve original results for relationships, converted processed data to JSON strings for cache storage, and handled `get_children` parameter correctly.
* Prevention: Run tests incrementally during refactoring rather than implementing entire change at once. Consider backward compatibility for test interfaces when changing method signatures.

## Cache Content Serialization Confusion

* Issue: Cache methods expected string content but `BlockManager` was passing dict objects, causing serialization errors.
* Resolution: Added JSON string conversion in `BlockManager` before storing in cache, and JSON parsing when retrieving from cache via `parse_cache_content()` method.
* Prevention: Clarify data format expectations at interface boundaries. Document whether methods expect serialized or deserialized data formats.

## Agent Tool UUID Resolution Errors

* Issue: Agent tools were failing with "Invalid type for identifier: <class 'NoneType'>" when calling `resolve_to_uuid(index)` with non-existent index values.
* Resolution: Added proper None checking in `NotionGetBlockContentTool` with meaningful error messages for invalid indices. Note: `NotionGetChildrenTool` was later removed as redundant.
* Prevention: Always validate input parameters and handle None/invalid cases gracefully in tool implementations. Provide clear error messages indicating what went wrong.

## Code Duplication in JSON Parsing

* Issue: User identified duplicate JSON parsing code scattered across `NotionClient` and `BlockManager` methods.
* Resolution: Created centralized `parse_cache_content()` helper method in `BlockManager` and refactored all duplicate parsing code to use this single method.
* Prevention: Look for code patterns that repeat across multiple methods during implementation. Extract common functionality into helper methods early in the refactoring process.

## Method Visibility Misunderstanding

* Issue: Initially created `_parse_cache_content()` as private method but it was being used by `NotionClient`, violating encapsulation principles.
* Resolution: User requested removing underscore to make it public method `parse_cache_content()` since it's used across classes.
* Prevention: Consider method visibility and cross-class usage patterns when designing interfaces. If method is used by multiple classes, it should be public with proper documentation. 