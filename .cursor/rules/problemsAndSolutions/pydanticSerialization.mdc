---
description: Issues related to Pydatnic (de)serialization
globs: 
alwaysApply: false
---
# Issues encountered during deserialization of `CustomUUID` inside `BlockTree`

Both are subclasses of Pydantic `BaseModel`

## Issue: Initial Goal - Replace String UUIDs with `CustomUUID` Class
*   The primary objective was to replace all string-based UUIDs in the `NotionAgent` project with a new `CustomUUID` class (from `common/src/tz_common/uuid.py`) to improve type safety and consistency. This involved removing an old `UUIDConverter` class.

## Issue: Pydantic Deserialization for `CustomUUID` in `BlockTree`
*   The `BlockTree.from_dict()` method initially performed manual string-to-`CustomUUID` conversion. This led to an `AssertionError` in `test_serialization_round_trip` because Pydantic V1 models, when used as types for dictionary keys or values within another Pydantic model, require a special mechanism to be correctly parsed from strings.

## Resolution: Pydantic Deserialization for `CustomUUID` in `BlockTree`
*   1.  Added `__get_validators__` and a corresponding `validate_custom_uuid_for_pydantic` class method to `CustomUUID`. This allows Pydantic to use `CustomUUID.from_string` automatically when parsing dictionary data into a `BlockTree` model.
*   2.  Simplified `BlockTree.from_dict()` to directly use Pydantic's `cls(**data)` for deserialization, leveraging the new validator in `CustomUUID`.

## Prevention: Pydantic Deserialization for `CustomUUID` in `BlockTree`
*   When using custom types as dictionary keys/values or nested models in Pydantic V1, ensure the custom type implements `__get_validators__` for seamless parsing.

## Issue: Test Failures due to `CustomUUID` Type Expectations
*   Many tests failed because methods updated to expect `CustomUUID` objects were still being passed raw strings, or `CustomUUID.from_string` was called with already converted `CustomUUID` objects or incorrect types (like integers).

## Resolution: Test Failures due to `CustomUUID` Type Expectations
*   1.  Updated test data (e.g., in `test_block_cache.py`, `test_block_tree.py`) to use valid UUID strings that `CustomUUID.from_string` could process.
*   2.  Modified `CustomUUID.from_string` to return the input directly if it's already a `CustomUUID` instance.
*   3.  Ensured that calling code (e.g., `notion_client.py`) correctly passed string UUIDs from API responses to `CustomUUID.from_string` before any other conversions.

## Prevention: Test Failures due to `CustomUUID` Type Expectations

*   When refactoring types, meticulously check all call sites, including test files, to ensure correct type instantiation and argument passing. Make validator/parser methods robust to receiving already-correct types.