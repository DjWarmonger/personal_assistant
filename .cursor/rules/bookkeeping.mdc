---
description: 
globs: *.md
alwaysApply: false
---
# Documentation & Notes Update Policy

This document explains on how to save notes and modify .md files for future reference.
These rules are written for an autonomous coding agent. All `.notes` entries and modified `.md` files feed directly into the agent's future context, so optimize for AI comprehension.

## Scope

Each directory (root and sub-folders) may have its own `.md` docs. Update only the files affected by your change.

## Confirmation Gate

**Never** modify `TODO.md`, `BACKLOG.md`, or `ALREADY_DONE.md` until the user explicitly confirms that the feature works.

1. When implementation appears finished, ask:

   > "The feature seems implemented. Have you tested it and confirmed it works? May I update the documentation?"
2. Proceed only after a clear **Yes**.

## After Confirmation

* Move completed items from `TODO`/`BACKLOG` to `ALREADY_DONE`.
* If you changed libraries, environment variables, scripts, or external configuration, update `setup.md` so a newcomer can run the project unaided.
* When project goals or architecture change, refresh `README.md` accordingly.

---

# Problem-Solving Notes (`.notes/`)

## When to Write

Create a new `.md` file in `.notes/` **only after** the issue is solved and confirmed.

## What to Capture

* **Issue**: error message or concise description.
* **Resolution**: what fixed it (use back-ticks for code, file, or symbol names).
* **Prevention**: actionable guidance to avoid recurrence, e.g. clarify requirements, handle edge cases, propose alternatives, adopt patterns.

## Style

* Be concise; skip ornamental formatting.
* Remember: these notes and docs will be parsed by an AI; use clear structure, short declarative sentences, and avoid ambiguous pronouns.
* Use `#` headings, plain lists, and no bold within notes.
* Keep each note self-contained to ease re-ordering or splitting.
