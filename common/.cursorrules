# Used libraries

- Use Python std libs where possible.
- Wrap LangChain/LightRAG/Neo4j to hide complexity.

## Langchain / LangGraph

Most popular framework that handles LLM calls, chains and tool handling. TZ framework wraps it up with custom logic to sim0plify usage and cover unneccessary configuration options and unused layers of abstraction.

## Langfuse

- Langfuse monitoring should be optional but trivial to enable.

## Graph databases

The core assumption is to be able to store knowledge in plain text and human-readable format, and to be able to manually edit and fix knowledge.

### LightRAG

Simple to use RAG library allowing to easily create and query graph databases. It is required to store complex dependencies in the knowledge base(s) used by agents.

LightRAG is wrapped in custom layer

### Neo4j

Industry standard, mainly used for visualizing knowledge graph and future compatibility with any other database or deployment tools.

# Library Contents

- Split tools into packages (e.g., data structures, LangChain wrappers).

## Context data representation

- Represent context and knowledge in human-readable formats.
- Assign UUIDs for all data sources and artifacts to enable tracing.

### TODO: Document class

Document is a basic structure that can represent any source data, text or multimedia, web url, but also text or other artifact generated by model.

It is required to be able to trace back to the source of particular knowledge, or statement in agent context.

### AgentTask

It is required to be able to associate executed task with its input context and output documents.

## AI Toolbox

- Offer pre-built tools (LLM calls, image generation, etc.).
- Ship with defaults; user shouldnâ€™t need advanced setup.



