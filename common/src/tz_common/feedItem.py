# TODO: Unify across projects

from pydantic import BaseModel
from datetime import datetime

# TODO: UUID for every item
# TODO: Hyperlink to retrieve full content from queue
# TODO: Store multimedia content, such as video or sound
# TODO: Icon?
# TODO: Category tags generated by Agents
# TODO: Rating

class FeedItem(BaseModel):
	item_key: str
	title: str
	message: str
	source: str
	link: str = ""
	summary: str | None = None
	thread_id: str | None = None
	timestamp: datetime | None = None
	read: bool = False

	class Config:
		from_attributes = True

	def to_dict(self):
		return {
			"item_key": self.item_key,
			"title": self.title,
			"link": self.link,
			"summary": self.summary,
			"timestamp": self.timestamp.isoformat(),
			"message": self.message,
			"source": self.source
		}

	def to_email_dict(self):
		return {
			"id": self.item_key,
			"threadId": self.thread_id,
			"subject": self.title,
			"sender": self.source,
			"snippet": self.summary,
			"body": self.message
		}

	def printEmail(self, printBody = True):
		print("\n".join(f"{key}: {value}" for key, value in self.to_email_dict().items() if key != "body"))
		if printBody:
			print(self.message)


# TODO: Store feedback added by user
class ItemWithFeedback(BaseModel):
	item: FeedItem
	userFeedback: str | None = None

class FeedItemFactory:
	
	def from_gmail(self, email_data):

		if 'internalDate' not in email_data:
			date = datetime.now()
		else:
			date = datetime.fromtimestamp(email_data['internalDate'])

		return FeedItem(
			item_key=email_data['id'],
			thread_id=email_data['threadId'],
			title=email_data['subject'],
			source=email_data['sender'],
			summary=email_data['snippet'],
			message=email_data['body'],
			timestamp=date
		)