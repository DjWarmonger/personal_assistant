---
description: Database and Storage features
globs: operations/blocks/*.py,Agents/NotionAgent/operations/blocks/*.py
alwaysApply: false
---
## Block Handling and Data Flow

The processing and management of Notion blocks, their identifiers (UUIDs and integer IDs), caching, and filtering are handled by a set of specialized classes: `Index`, `BlockCache`, `BlockHolder`, and `BlockManager`. Understanding their roles is crucial for further development.

### Class Responsibilities

1.  **`Index`**:
    *   **Primary Role**: Manages the mapping between Notion's string-based UUIDs and the system's internal integer IDs.
    *   Assigns a unique integer ID to each encountered UUID.
    *   Tracks visited pages/blocks and user-defined "favourites."
    *   Provides methods to resolve integer IDs back to UUIDs and vice-versa.

2.  **`BlockCache`**:
    *   **Primary Role**: Stores Notion object data (pages, blocks, databases, search results) to minimize redundant API calls.
    *   **Keying**: Uses Notion UUIDs as the primary keys for storing and retrieving cached items.
    *   **Content**: Stores **unfiltered** content as JSON strings with only UUID竊段nt conversion applied. The cache now stores complete Notion data to enable dynamic filtering on retrieval.
    *   Manages Time-To-Live (TTL) for cached data and handles invalidation based on Notion's `last_edited_time`.
    *   Maintains parent-child relationships between Notion objects, also using UUIDs to define these relationships.

3.  **`BlockHolder`**:
    *   **Primary Role**: A stateless utility class for low-level, atomic operations on Notion data structures, including UUID conversion and dynamic filtering.
    *   **Core Methods**:
        *   `extract_all_uuids()`: Extracts all UUIDs found within a given JSON payload.
        *   `convert_uuids_to_int()`: Converts UUIDs to integer IDs using provided mapping.
        *   `apply_filters()`: Applies dynamic filtering based on `FilteringOptions` enum.
    *   **Filtering System**: Uses `FilteringOptions` enum with granular categories:
        *   Individual options: `TIMESTAMPS`, `STYLE_ANNOTATIONS`, `METADATA`, `EMPTY_VALUES`, `TYPE_FIELDS`, `URLS`, `SYSTEM_FIELDS`
        *   Composite options: `MINIMAL`, `AGENT_OPTIMIZED`
    *   It does *not* interact with the `Index` or `BlockCache` directly.

4.  **`BlockManager`**:
    *   **Primary Role**: Orchestrates the data processing pipeline when new Notion data is fetched or needs to be stored/retrieved. Acts as the central coordinator between `NotionClient`, `Index`, `BlockCache`, and `BlockHolder`.
    *   **Storage Strategy**: Stores unfiltered data in cache with only UUID竊段nt conversion applied.
    *   **Dynamic Filtering**: Applies filtering when data is retrieved and returned to agents.
    *   **Core Methods**:
        *   `process_and_store_block()`: Processes raw Notion data, converts UUIDs to ints, and stores unfiltered in cache.
        *   `process_children_response()`: Retrieves data from cache and applies dynamic filtering before returning.
        *   `parse_cache_content()`: Converts JSON strings back to dictionaries.

### Filtering Architecture

The system now implements a **separation of concerns** between caching and filtering:

*   **Cache Layer**: Stores complete, unfiltered Notion data with only UUID竊段nt conversion
*   **Filtering Layer**: Applied dynamically when data is retrieved or returned to agents
*   **Agent Tools**: All filtering happens centrally in `agentTools.py` via `handle_client_response()`

### Data Flow & Interaction Summary

1.  `NotionClient` fetches raw data from the Notion API.
2.  `NotionClient` passes this raw data to `BlockManager`.
3.  `BlockManager`:
    a.  Extracts all UUIDs (via `BlockHolder.extract_all_uuids()`).
    b.  Ensures all UUIDs are in `Index` and gets their int IDs, creating a `uuid_to_int_map`.
    c.  Converts UUIDs to int IDs (via `BlockHolder.convert_uuids_to_int()`) but **does not apply filtering**.
    d.  Stores the **unfiltered** JSON string in `BlockCache` (keyed by the primary object's UUID).
    e.  Records any parent-child relationships in `BlockCache` (using UUIDs).
4.  When data is requested:
    a.  `BlockManager` retrieves unfiltered data from `BlockCache`.
    b.  `BlockManager` applies dynamic filtering (via `BlockHolder.apply_filters()`) based on context needs.
    c.  Filtered data is returned to the requesting component.
5.  **Agent Tools**: All agent interactions go through `agentTools.py` which applies `FilteringOptions.AGENT_OPTIMIZED` filtering centrally.

### Guidelines for Future Development

*   **Cache Purity**: The cache should only store unfiltered data with UUID竊段nt conversion. Never store pre-filtered data in cache.
*   **Dynamic Filtering**: Always apply filtering at retrieval time, not at storage time. This enables flexible filtering for different use cases.
*   **Centralized Agent Filtering**: All agent tools should receive filtered data through the centralized filtering in `agentTools.py`.
*   **Decoupling**: Maintain the separation of concerns. `NotionClient` should delegate data processing and caching logic to `BlockManager`.
*   **Stateless `BlockHolder`**: `BlockHolder` methods should remain pure and stateless, operating only on the data passed to them.
*   **`Index` as Source of Truth for IDs**: All UUID-to-integer ID conversions should ultimately rely on the `Index`.
*   **`BlockCache` UUID-centric**: The cache's internal structure (keys, relationships) should continue to be based on UUIDs.
*   **Filtering Flexibility**: Use appropriate `FilteringOptions` based on context:
    *   `AGENT_OPTIMIZED`: For most agent interactions (default in agentTools.py)
    *   `MINIMAL`: For less aggressive filtering when more data is needed
    *   Individual options: For specific filtering needs
*   **Extensibility**:
    *   New filtering options should be added to the `FilteringOptions` enum.
    *   New atomic transformations belong in `BlockHolder`.
    *   New orchestration logic belongs in `BlockManager`.
    *   New API interactions belong in `NotionClient`.
*   **Consistency**: Ensure that data passed to agents consistently uses integer IDs for identifiable Notion objects and appropriate filtering, while internal systems like `BlockCache` use UUIDs and store complete data.