# Project Overview

Notion Agent interacts with Notionâ€™s API, navigating across pages, retrieving relevant content, and returning it to the user. It can handle requests from humans or other agents. Future plans include more advanced configurations.

# Project Goals

- Reliably retrieve relevant content from multiple Notion pages.
- Preserve all text without alteration or loss of context.
- Make retrieved data persistent, possibly transferring it to permanent storage, after which it might be deleted from Notion.
  - Process or enchance the data, providing valuable knowledge and insights. This knowledge may become input to other AI-based systems.

## Users

- Users can be human, another agent, or a script.
- Notion Agent can be queried once for a single response or engaged in a (short-lived) chat session.
- In script mode, all processing must occur in a single pass.

## Pain Points

- Notion API limits requests to 3 per second.
- Each Notion Block requires a separate fetch.
- Keyword-based text search may fail to capture user intent.
- Search often returns recent items, which might include already completed tasks.

## Optimization

- Minimize token usage.
- Cache fetched blocks and their children to speed repeated queries.
- Maintain parent-child relationships to preserve context.
- Strip unnecessary data from blocks to keep them concise.
- Consider replacing UUIDs/URLs with shorter placeholders.
- Avoid re-fetching or reprocessing identical content.

# Features

## Understand User Request

- Plan how to gather all relevant content.
- Request clarifications in subsequent queries.
- Maintain context throughout the chat.

## Fetch Notion Pages

- Browse multiple pages, potentially in multiple query-response cycles.
- Perform Notion text searches and query databases.
- Support pagination.

## Summaries & Knowledge Extraction

- Agent should provide meaningful summaries, plans, or extracted knowledge, rather than raw copy-paste.
- Ensure these outputs are coherent, context-rich, and directly address user queries.
- Return results in Markdown by default for clarity.
- External media links may be returned, but not the actual media.

## Database and Storage

- Cache all blocks along with parent-child relationships.
- Do not cache entire pages; instead, check modification date to invalidate outdated cache entries.
- A Time-To-Live (TTL) may be implemented for cached blocks.

### Favourite Pages

- Maintain a favorites list for quick access (e.g., daily to-dos, main project pages).
- Users can add or remove favorites.
- User can also provide a Notion URL directly.

### Storing Context Info

- Store block type (page, database, etc.) and summary.
- Keep track of the parent-child tree for nested structures.
- Potentially fetch entire subtrees when needed.

### Cache Updates

- Check page modification timestamps.
- If an item in search/database results is outdated, remove relevant cache entries.

## Edit Notion Pages (TODO)

- Create new items in a Notion database.

# Architecture

- **Query Decomposition Agent (TODO)**: May break down queries into actionable steps.
- **Main Notion-Browsing Agent**: Handles navigation, caching, and favorites.
- **Summary Agent (TODO)**: Summarizes or reports on retrieved content.
- **Edit Agent (TODO)**: Edits Notion pages and invalidates cache after editing.
- **Block Captioning Agent (TODO)**: Could annotate or caption blocks
  - Operate in the background. It is not worth waiting for caption agent when it stops the main process.
- **Background Agents (TODO)**: Potentially extract or structure data from fetched content.

## Error Handling (TODO)

- Likely to be part of the broader project.

# GUI

- Using Marimo dashboard during development/testing.
- No user-facing GUI belongs to scope of this projectt.

# Documentation

- [Get Block Children](https://developers.notion.com/reference/get-block-children)
- [Search](https://developers.notion.com/reference/post-search)
- [Retrieve a Page](https://developers.notion.com/reference/retrieve-a-page)
- [Pagination](https://developers.notion.com/reference/intro#pagination)

